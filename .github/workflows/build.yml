name: Go Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: '/home/runner/work/dice_roller/dice_roller/go.mod'

    - name: Get dependencies
      run: go mod tidy

    - name: Build
      if: success()
      run: |
        make build

    - name: Install GitHub CLI
      if: success()
      run: |
        sudo apt-get install -y gh

    - name: Authenticate GitHub CLI
      if: success()
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        gh auth status

    - name: Get Latest Release Tag and Increment
      run: |
        # Fetch the latest release tag from GitHub
        LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')

        # Set a default tag if no releases exist
        if [[ -z "$LATEST_TAG" ]]; then
          NEW_TAG="v1.0.0"
        else
          # Extract major, minor, and patch numbers
          MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | tr -d 'v')
          MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
          PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)

          # Increment the patch version
          PATCH=$((PATCH + 1))
          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
        fi

        # Get commit hash
        COMMIT_HASH=$(git rev-parse --short HEAD)

        # Create the new release with the new tag
        gh release create "$NEW_TAG" \
          ./build/ebit-hello \
          --title "$NEW_TAG" \
          --notes "Release created from commit $COMMIT_HASH. This release was automatically generated by GitHub Actions."
